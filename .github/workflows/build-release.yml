name: Build and Release

on:
  push:
    branches: [ main ]

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.version_changed }}
      new_version: ${{ steps.check.outputs.new_version }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Check if version was updated
      id: check
      run: |
        # Check if commit message contains version update pattern
        COMMIT_MSG=$(git log -1 --pretty=%B)
        if echo "$COMMIT_MSG" | grep -qE "Build: bump version|version.*(1\.[0-9]+\.[0-9]+)"; then
          # Extract version from setup.py
          NEW_VERSION=$(grep -oP "version=\"\K[0-9]+\.[0-9]+\.[0-9]+" setup.py)
          echo "Version update detected: $NEW_VERSION"
          echo "version_changed=true" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        else
          echo "No version update detected"
          echo "version_changed=false" >> $GITHUB_OUTPUT
        fi

  build-and-release:
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.check-version.outputs.new_version }}
        release_name: Release v${{ needs.check-version.outputs.new_version }}
        body: |
          Release version ${{ needs.check-version.outputs.new_version }}
          
          ## Changes
          See [commits](https://github.com/${{ github.repository }}/commits/v${{ needs.check-version.outputs.new_version }}) for details.
        draft: false
        prerelease: false
    
    - name: Upload wheel to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/enview-${{ needs.check-version.outputs.new_version }}-py3-none-any.whl
        asset_name: enview-${{ needs.check-version.outputs.new_version }}-py3-none-any.whl
        asset_content_type: application/zip
    
    - name: Upload sdist to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/enview-${{ needs.check-version.outputs.new_version }}.tar.gz
        asset_name: enview-${{ needs.check-version.outputs.new_version }}.tar.gz
        asset_content_type: application/gzip
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        if [ -n "$TWINE_PASSWORD" ]; then
          python -m twine upload dist/*
        else
          echo "Warning: PYPI_API_TOKEN not set, skipping PyPI upload"
        fi